import pytest

from Task import Task

'''
"Я тестировал функцию find_average для различных типов списков: пустых,
с одним элементом и со многими элементами, чтобы убедиться, что функция корректно обрабатывает различные
входные данные."
"Для функции compare_averages я решил проверить все возможные сценарии: когда средние значения равны, когда один
список имеет большее среднее значение, когда один из списков пуст и когда оба списка пусты.
Это позволило мне убедиться, что функция корректно обрабатывает все возможные комбинации входных данных."
'''


def test_average():
    # Проверка функции вычисления среднего значения для списка.
    assert Task.find_average([1, 2, 3, 4, 5]) == 3, "не сработал в случае нескольких значений в списке"
    assert Task.find_average([]) == 0, "не сработал в случае пустого массива"
    assert Task.find_average([1]) == 1, "не сработал в случае одного значения"
    # Проверка функции сравнения средних значений, когда оба списка имеют равные средние значения.
    assert Task.compare_averages([1, 2, 3], [1, 2, 3]) == "Средние значения равны",\
        "не сработало, потому что функция неверно вычисляет средние значения для одинаковых списков."

    # Проверка функции сравнения средних значений, когда один список имеет большее среднее значение.
    assert Task.compare_averages([1, 2, 3], [4, 5, 6]) == "Второй список имеет большее среднее значение",\
        "не сработало, потому что функция неверно сравнивает средние значения, когда второй список больше."
    assert Task.compare_averages([4, 5, 6], [1, 2, 3]) == "Первый список имеет большее среднее значение",\
        "не сработало, потому что функция неверно сравнивает средние значения, когда первый список больше."
    # Проверка функции сравнения средних значений, когда один из списков пуст.
    assert Task.compare_averages([], [1, 2, 3]) == "Второй список имеет большее среднее значение", \
        "не сработало, потому что функция неверно обрабатывает сценарий с пустым первым списком."
    assert Task.compare_averages([1, 2, 3], []) == "Первый список имеет большее среднее значение",\
        "не сработало, потому что функция неверно обрабатывает сценарий с пустым вторым списком."
    # Проверка функции сравнения средних значений, когда оба списка пусты.
    assert Task.compare_averages([], []) == "Средние значения равны", \
        "не сработало, потому что функция неверно обрабатывает сценарий, когда оба списка пусты."
    # Проверка функции с использованием отрицательных чисел.
    assert Task.compare_averages([-1, -2, -3], [-4, -5, -6]) == "Первый список имеет большее среднее значение", \
        "не сработало с отрицательными числами, когда первый список больше"
    assert Task.compare_averages([-1, -2, -3], [1, 2, 3]) == "Второй список имеет большее среднее значение", \
        "не сработало с отрицательными числами против положительных"
    assert Task.compare_averages([-4, -5, -6], [-1, -2,-3]) == "Второй список имеет большее среднее значение", \
        "не сработало с отрицательными числами, когда второй список больше"


'''
В папке htmlcov  будет файл index.html, 
который нужно открыть в  веб-браузере,
чтобы просмотреть отчет о покрытии кода тестами.
Или в терминале ввести команду pytest --cov=Task Test_task.py, чтобы
увидеть покрытие кода тестами
'''